#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2014--, The Qiita Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------

import click
from subprocess import run, PIPE
from os import environ

from qp_fastp_minimap2 import plugin
from qp_fastp_minimap2.qp_fastp_minimap2 import fastp_minimap2_to_array
from qp_fastp_minimap2.utils import client_connect


@click.command()
@click.argument('url', required=True)
@click.argument('job_id', required=True)
@click.argument('out_dir', required=True)
def execute(url, job_id, out_dir):
    """Executes the task given by job_id and puts the output in output_dir"""
    # there are basically 2 different kinds of jobs: register (commands)
    # and everything else
    if 'register' in job_id:
        plugin(url, job_id, out_dir)
    else:
        qclient = client_connect(url)
        job_info = qclient.get_job_info(job_id)
        parameters = job_info['parameters']

        qclient.update_job_step(
            job_id, "Step 1 of 4: Collecting info and generating submission")
        artifact_id = parameters['input']
        del parameters['input']

        parameters['environment'] = environ["ENVIRONMENT"]

        files, prep = qclient.artifact_and_preparation_files(artifact_id)
        fps = {'raw_forward_seqs': [], 'raw_reverse_seqs': []}
        for sn, fs in files.items():
            fps['raw_forward_seqs'].append(fs[0]['filepath'])
            if fs[1]:
                fps['raw_reverse_seqs'].append(fs[1]['filepath'])

        main_fp, finish_fp, out_files_fp = fastp_minimap2_to_array(
            fps, out_dir, parameters, prep, url, job_id)

        # Submitting jobs and returning id
        main_job = run(['sbatch', main_fp], stdout=PIPE)
        main_job_id = main_job.stdout.decode('utf8').split()[-1]
        finish = run(['sbatch', '-d', f'afterok:{main_job_id}', finish_fp],
                     stdout=PIPE)
        finish_job_id = finish.stdout.decode('utf8').split()[-1]
        print(f'{main_job_id}, {finish_job_id}')

        qclient.update_job_step(
            job_id, "Step 2 of 4: Running fastp and minimap2")


if __name__ == '__main__':
    execute()
